// 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏• 'fs' (File System) ‡∏Ç‡∏≠‡∏á Node.js
// ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ 'fs/promises' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ async/await ‡πÑ‡∏î‡πâ ‡∏ã‡∏∂‡πà‡∏á‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
const fs = require('fs/promises');
const path = require('path');

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Tasks
const taskFilePath = path.join(__dirname, "tasks.json");

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Tasks ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå tasks.json
 * @returns {Promise<Array>} Promise ‡∏ó‡∏µ‡πà‡∏à‡∏∞ resolve ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏Ç‡∏≠‡∏á Tasks
 */

async function readTasks() {
    try {
        // ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå

        const data = await fs.readFile(taskFilePath, "utf-8");
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON string ‡πÄ‡∏õ‡πá‡∏ô JavaScript Array
        return JSON.parse(data);

    } catch (error) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡∏Ç‡∏∂‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
        if (error.code === "ENOENT") {
            // ENOENT ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á "Error NO ENTry" ‡∏´‡∏£‡∏∑‡∏≠ "File not found"
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ß‡πà‡∏≤‡∏á‡πÜ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
            return [];
        } else {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô error ‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
            throw error;
        }
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Tasks ‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå tasks.json
 * @param {Array} tasks - Array ‡∏Ç‡∏≠‡∏á Tasks ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
 * @returns {Promise<void>}
 */
async function writeTasks(tasks) {
    // ‡πÅ‡∏õ‡∏•‡∏á JavaScript Array ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON string
    // null, 2 ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô (‡∏°‡∏µ indent 2 spaces)

    const data = JSON.stringify(tasks, null, 2);

    await fs.writeFile(taskFilePath, data, "utf-8");
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå

async function main() {
    // process.argv ‡∏Ñ‡∏∑‡∏≠ Array ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö command-line arguments ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    // [0] ‡∏Ñ‡∏∑‡∏≠ 'node'
    // [1] ‡∏Ñ‡∏∑‡∏≠ 'path/to/your/index.js'
    // ‡πÄ‡∏£‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà index ‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ
    const [command, ...args] = process.argv.slice(2);

    switch (command) {
        case "add": {
            // ‡∏î‡∏∂‡∏á description ‡∏Ç‡∏≠‡∏á task ‡∏à‡∏≤‡∏Å argument ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
            const description = args[0];

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà description ‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!description) {
                console.error("Error: Please provide a task description.");
                return;
            }

            // ‡∏≠‡πà‡∏≤‡∏ô tasks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            const tasks = await readTasks();

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
            // ‡∏´‡∏≤ ID ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏ß‡∏Å 1
            const lastTask = tasks[tasks.length - 1];
            const newId = (lastTask ? lastTask.id : 0) + 1;

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏Ç‡∏≠‡∏á task ‡πÉ‡∏´‡∏°‡πà
            const newTask = {
                id: newId,
                description: description,
                status: "todo", // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ "todo"
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),

            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° task ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô array
            tasks.push(newTask);

            // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô array ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
            await writeTasks(tasks);

            console.log("Task added:", newTask);
            break;
        }

        case "list": {
            // ‡∏≠‡πà‡∏≤‡∏ô tasks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            const tasks = await readTasks();
            const filterStatus = args[0]; // 'done', 'todo', 'in-progress' ‡∏´‡∏£‡∏∑‡∏≠ undefined

            if (tasks.length === 0) {
                console.log("No tasks found.");
                return;
            }

            console.log("---Your Tasks---");

            const taskToDisplay = filterStatus ? tasks.filter(task => task.status === filterStatus) : tasks;

            if (taskToDisplay.length === 0) {
                console.log(`No tasks with status "${filterStatus}" found.`);
                return;
            }

            taskToDisplay.forEach(task => {
                let statusIcon = "";

                switch (task.status) {
                    case 'todo':
                        statusIcon = 'üìù'; // To-Do
                        break;
                    case 'in-progress':
                        statusIcon = '‚è≥'; // In Progress
                        break;
                    case 'done':
                        statusIcon = '‚úÖ'; // Done
                        break;
                }

                console.log(`${statusIcon} ${task.id}. [${task.status}] - ${task.description}`);
            });

            console.log('------------------');
            break;
        }

        case "update": {
            const taskId = parseInt(args[0], 10);
            const newDescription = args.slice(1).join(" ");

            if (isNaN(taskId) || !newDescription) {
                console.error("Error: Please provide a valid task ID and new description.");
                return;
            }

            const tasks = await readTasks();
            const taskIndex = tasks.findIndex(task => task.id === taskId);

            if (taskIndex === -1) {
                console.error(`Error: Task with ID ${taskId} not found.`);
                return;
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• task
            tasks[taskIndex].description = newDescription;
            tasks[taskIndex].updatedAt = new Date().toISOString();

            await writeTasks(tasks);
            console.log(`Task ${taskId} updated:`, tasks[taskIndex]);
            break;
        }

        case 'delete': {
            const taskId = parseInt(args[0], 10);
            if (isNaN(taskId)) {
                console.error('Error: Please provide a valid task ID.');
                console.error('Usage: node index.js delete <id>');
                return;
            }
            const tasks = await readTasks();
            const newTasks = tasks.filter(task => task.id !== taskId);
            if (tasks.length === newTasks.length) {
                console.error(`Error: Task with ID ${taskId} not found.`);
                return;
            }
            await writeTasks(newTasks);
            console.log(`Task ${taskId} deleted successfully.`);
            break;
        }

        case "mark-done":
        case "mark-in-progress": {
            const taskId = parseInt(args[0], 10);

            if (isNaN(taskId)) {
                console.error("Error: Please provide a valid task ID.");
                console.error(`Usage : node index.js ${command} <id>`);
                return;
            }

            const tasks = await readTasks();
            const task = tasks.find(task => task.id === taskId);

            if (!task) {
                console.error(`Error: Task with ID ${taskId} not found.`);
                return;
            }

            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î status ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å command ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
            const newStatus = command === "mark-done" ? "done" : "in-progress";

            task.status = newStatus;
            task.updatedAt = new Date().toISOString();

            await writeTasks(tasks);
            console.log(`Task ${taskId} marked as ${newStatus}.`, task);
            break;

        }

        default:
            console.log(`
Unknown command: ${command || 'No command given.'}

Available commands:
  add "<description>"         - Add a new task
  list [status]               - List tasks (optional filter: todo, in-progress, done)
  update <id> "<description>" - Update a task's description
  delete <id>                 - Delete a task
  mark-done <id>              - Mark a task as done
  mark-in-progress <id>       - Mark a task as in-progress
      `);
            break;
    }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô main
main().catch(console.error);