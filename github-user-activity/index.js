// 1. ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Command Line
// process.argv ‡πÄ‡∏õ‡πá‡∏ô array ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö argument ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
// [0] ‡∏Ñ‡∏∑‡∏≠ path ‡∏Ç‡∏≠‡∏á node
// [1] ‡∏Ñ‡∏∑‡∏≠ path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå script ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô
// [2] ‡∏Ñ‡∏∑‡∏≠ argument ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ (username)


const username = process.argv[2];

// 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏™‡πà username ‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

if (!username) {
    console.error('Please enter a username');
    console.log('Example: node index.js octocat');
    process.exit(1); // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 1 (‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)

}


// 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å GitHub API
async function fetchActivity(username) {
    const url = `https://api.github.com/users/${username}/events`;

    try {
        const response = await fetch(url);

        if (!response.ok) {
            if (response.status === 404) {
                throw new Error(`User ${username} not found`);
            }
            throw new Error("Error from GitHub API", response.statusText);
        }

        const events = await response.json();
        return events;
    } catch (error) {
        console.error(error);
        return null;
    }
}

// 4. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
function displayActivity(events) {
    // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 15 ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

    events.slice(0, 15).forEach((event) => {
        let message = "";

        const repoName = event.repo.name;

        switch (event.type) {
            case "PushEvent":
                const commitCount = event.payload.commits.length;
                message = `- üöÄ Pushed ${commitCount} commit(s) to ${repoName}`;
                break;
            case 'CreateEvent':
                if (event.payload.ref_type === 'repository') {
                    message = `- ‚ú® Created a new repository ${repoName}`;
                } else if (event.payload.ref_type === 'branch') {
                    message = `- üåø Created a new branch "${event.payload.ref}" in ${repoName}`;
                }
                break;
            case 'IssuesEvent':
                if (event.payload.action === 'opened') {
                    message = `- üêû Opened a new issue in ${repoName}`;
                }
                break;
            case 'PullRequestEvent':
                if (event.payload.action === 'opened') {
                    message = `- üîÉ Opened a new pull request in ${repoName}`;
                }
                break;
            case 'WatchEvent':
                if (event.payload.action === 'started') {
                    message = `- ‚≠ê Starred ${repoName}`;
                }
                break;
            default:
                // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á event ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à
                break;
        }

        if (message) {
            console.log(message)
        }
    })
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function main() {
    console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${username}...`);

    const events = await fetchActivity(username);

    if (events && events.length > 0) {
        console.log(`‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á ${username}:`);

        displayActivity(events);
    } else if (events) {
        console.log(`\nü§∑ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${username}`);
    }

}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
main();